training = adData[ inTrain,]
testing = adData[-inTrain,]
newtraining <-training[,c(grep("^IL",colnames(adData)),grep("diagnosis",colnames(adData)))]
newtesting <- test[,c(grep("^IL",colnames(adData)),grep("diagnosis",colnames(adData)))]
modelnoPCA <- train(diagnosis~ ., method="glm", data=newtraining)
confusionMatrix(newtesting$diagnosis,
predict(modelnoPCA,
newtesting[,-grep("^diagno",colnames(newtesting))])
newtraining <-training[,c(grep("^IL",colnames(adData)),grep("diagnosis",colnames(adData)))]
newtesting <- testing[,c(grep("^IL",colnames(adData)),grep("diagnosis",colnames(adData)))]
modelnoPCA <- train(diagnosis~ ., method="glm", data=newtraining)
confusionMatrix(newtesting$diagnosis,
predict(modelnoPCA,
newtesting[,-grep("^diagno",colnames(newtesting))])
)
newtraining <-training[,c(grep("^IL",colnames(training)),grep("diagnosis",colnames(training)))]
newtesting <- testing[,c(grep("^IL",colnames(testing)),grep("diagnosis",colnames(testing)))]
modelnoPCA <- train(diagnosis~ ., method="glm", data=newtraining)
confusionMatrix(newtesting$diagnosis,
predict(modelnoPCA,
newtesting[,-grep("^diagno",colnames(newtesting))]))
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
new_training <- training[, c(names(training)[IL_col_idx], "diagnosis")]
IL_col_idx <- grep("^[Ii][Ll].*", names(testing))
new_testing <- testing[, c(names(testing)[IL_col_idx], "diagnosis")]
# compute the model with non_pca predictors
non_pca_model <- train(diagnosis ~ ., data=new_training, method="glm")
non_pca_result <- confusionMatrix(new_testing[, 13],
predict(non_pca_model,
new_testing[, -13]))
non_pca_result
set.seed(3433)
non_pca_model <- train(diagnosis ~ ., data=new_training, method="glm")
# apply the non pca model on the testing set and check the accuracy
non_pca_result <- confusionMatrix(new_testing[, 13],
predict(non_pca_model,
new_testing[, -13]))
non_pca_result
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
new_training <- training[, c(names(training)[IL_col_idx], "diagnosis")]
IL_col_idx <- grep("^[Ii][Ll].*", names(testing))
new_testing <- testing[, c(names(testing)[IL_col_idx], "diagnosis")]
# compute the model with non_pca predictors
non_pca_model <- train(diagnosis ~ ., data=new_training, method="glm")
# apply the non pca model on the testing set and check the accuracy
non_pca_result <- confusionMatrix(new_testing[, 13],
predict(non_pca_model,
new_testing[, -13]))
non_pca_result
newtraining <-training[,c(grep("^IL",colnames(training)),grep("diagnosis",colnames(training)))]
newtesting <- testing[,c(grep("^IL",colnames(testing)),grep("diagnosis",colnames(testing)))]
modelnoPCA <- train(diagnosis~ ., method="glm", data=newtraining)
confusionMatrix(newtesting$diagnosis,
predict(modelnoPCA,
newtesting[,-grep("^diagno",colnames(newtesting))]))
training <- training[,c(grep("^IL",colnames(adData)),grep("diagnosis",colnames(adData)))]
modelnoPCA <- train(diagnosis~ ., method="glm", data=training)
##  quito la columna de diagnosis
indicediagnosis <- grep("diagnosis",colnames(training))
preProc <- preProcess(training[,-indicediagnosis],method = "pca",thresh = 0.8)
trainingpreproc <- predict(preProc, training[,-indicediagnosis])
trainingpreproc$diagnosis <- training$diagnosis
modelPCA <- train(diagnosis ~ .,
method="glm",
data=trainingpreproc)
##  matriz de confusion
confusionMatrix(testing$diagnosis,
predict(modelnoPCA,testing[,grep("^IL",colnames(adData))]))
testPC <- predict(preProc, testing[,grep("^IL",colnames(adData))])
confusionMatrix(testing$diagnosis,
predict(modelPCA,testPC))
matriznopca <- confusionMatrix(testing$diagnosis,
predict(modelnoPCA,
testing[,grep("^IL",colnames(adData))]))
testPC <- predict(preProc, testing[,grep("^IL",colnames(adData))])
matrizpca <- confusionMatrix(testing$diagnosis,
predict(modelPCA,testPC))
str(matriznopca)
matrizpca$table
?ave
rm(list=ls())
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
index <- createDataPartition(y = segmentationOriginal$Case,
p=0.70,
list = FALSE)
training <- segmentationOriginal[index,]
testing  <- segmentationOriginal[-index,]
set.seed(125)
modelfit <- train(Case~.,
data = segmentationOriginal,
method = "rpart")
training$FiberWidthCh1
training$TotalIntench2
newtestdata$FiberWidthCh1 = c(10,10,8,8)
newtestdata$PerimStatusCh1 =c(2,0,0,2)
newtestdata$VarIntenCh4 =c(0,100,100,100)
newtestdata <- testing[1:4,]
newtestdata[1:4,] <- 0
##newtestdata$TotalIntench2 = c(23000,50000,57000,0)
newtestdata$FiberWidthCh1 = c(10,10,8,8)
newtestdata$PerimStatusCh1 =c(2,0,0,2)
newtestdata$VarIntenCh4 =c(0,100,100,100)
which (colnames(newtestdata)=="CASE")
which(colnames(newtestdata)=="CASE")
which(colnames(newtestdata)=="CASE")
colnames(newtestdata)=="CASE"
colnames(newtestdata)=="Case"
which (colnames(newtestdata)=="Case")
predict(modelfit, newdata = newtestdata[,-2])
modelfit$finalModel
training$Case
training
training$Case
segmentationOriginal$Case
segmentationOriginal$Case
segmentationOriginal$Case
modelfit <- train(Case~.,
data = training,
method = "rpart")
segmentationOriginal$Case
rm(list=ls())
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
segmentationOriginal$case
segmentationOriginal$Case
str(segmentationOriginal$Case)
index <- createDataPartition(y = segmentationOriginal$Case,
p=0.70,
list = FALSE)
training <- segmentationOriginal[index,]
testing  <- segmentationOriginal[-index,]
set.seed(125)
modelfit <- train(Class~.,
data = training,
method = "rpart")
modelfit$finalModel
testing$TotalIntench2
testing$TotalIntench2
testing$TotalIntenCh2
newtestdata <- testing[1:4,]
newtestdata[1:4,] <- 0
newtestdata$TotalIntenCh2 = c(23000,50000,57000,0)
newtestdata$FiberWidthCh1 = c(10,10,8,8)
newtestdata$PerimStatusCh1 =c(2,0,0,2)
newtestdata$VarIntenCh4 =c(0,100,100,100)
predict(modelfit, newdata = newtestdata[,-2])
which (colnames(newtestdata)=="Class")
predict(modelfit, newdata = newtestdata[,-3])
predict(modelfit,testing)
predict(modelfit, newdata = newtestdata[,-3])
newtestdata <- testing[1:4,]
newtestdata$TotalIntenCh2 = c(23000,50000,57000,0)
newtestdata$FiberWidthCh1 = c(10,10,8,8)
newtestdata$PerimStatusCh1 =c(2,0,0,2)
newtestdata$VarIntenCh4 =c(0,100,100,100)
predict(modelfit, newdata = newtestdata[,-3])
fancyRpartPlot(modelfit$finalModel)
?fancyRpartPlot
??fancyRpartPlot
install.packages("rattle")
load("rattle")
library("rattle")
library(rattle)
library("rattle")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
train_dat <- segmentationOriginal[segmentationOriginal$Case=="Train",][, -2]
test_dat <- segmentationOriginal[segmentationOriginal$Case=="Test",][, -2]
model <- train(Class~., data=train_dat, method="rpart")
install.packages("RGtk2")
library("rattle")
restart()
library("rattle")
fancyRpartPlot(model$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
train_dat <- segmentationOriginal[segmentationOriginal$Case=="Train",][, -2]
test_dat <- segmentationOriginal[segmentationOriginal$Case=="Test",][, -2]
model <- train(Class~., data=train_dat, method="rpart")
fancyRpartPlot(model$finalModel)
library("rattle")
fancyRpartPlot(model$finalModel)
testing[1,3]
test_dat[1]
dim(test_dat)
test_dat[1,3]
which(colnames(test_dat)=="Class")
test_dat[1:5,2]
predict(model, test_dat[,-3])
predict(model, test_dat[,-1])
predict(model, test_dat[,-2])
newtestdata <- test_dat[1:4,-2]
predict(model, newtestdata)
predict(model, newdata = newtestdata)
newtestdata <- test_dat[1:4,-which(colnames(test_dat)=="Class")]
newtestdata$TotalIntenCh2 = c(23000,50000,57000,0)
newtestdata$FiberWidthCh1 = c(10,10,8,8)
newtestdata$PerimStatusCh1 = c(2,0,0,2)
newtestdata$VarIntenCh4 = c(0,100,100,100)
predict(model, newdata = newtestdata)
model$finalModel
?predict
test <- data.frame(TotalIntenCh2,FiberWidthCh1)
TotalIntenCh2 = c(23000,50000,57000,0)
FiberWidthCh1 = c(10,10,8,8)
PerimStatusCh1 = c(2,0,0,2)
VarIntenCh4 = c(0,100,100,100)
test <- data.frame(TotalIntenCh2,FiberWidthCh1)
test <- data.frame(TotalIntenCh2,FiberWidthCh1,PerimStatusCh1,VarIntenCh4)
predict(model, newdata = test)
predict(model, newdata = test)
newtestdata <- test_dat[1:4,-which(colnames(test_dat)=="Class")]
newtestdata$TotalIntenCh2 = c(23000,50000,57000,0)
newtestdata$FiberWidthCh1 = c(10,10,8,8)
newtestdata$PerimStatusCh1 = c(2,0,0,2)
newtestdata$VarIntenCh4 = c(0,100,100,100)
predict(model, newdata = newtestdata)
model$finalmodel
model$finalModel
predict(model, newdata = newtestdata)
rm(list=ls())
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
traindata <- segmentationOriginal[segmentationOriginal$Case=="Train",][, -2]
testdata <- segmentationOriginal[segmentationOriginal$Case=="Test",][, -2]
model <- train(Class~., data=traindata, method="rpart")
newtestdata <- testadat[1:4,-which(colnames(testadat)=="Class")]
newtestdata <- testadata[1:4,-which(colnames(testadat)=="Class")]
newtestdata <- testdata[1:4,-which(colnames(testdata)=="Class")]
newtestdata$TotalIntenCh2 = c(23000,50000,57000,NULL)
newtestdata$FiberWidthCh1 = c(10,10,8,8)
newtestdata$PerimStatusCh1 = c(2,NULL,NULL,2)
newtestdata$VarIntenCh4 = c(NULL,100,100,100)
newtestdata$TotalIntenCh2 = c(23000,50000,57000,NULL)
newtestdata$TotalIntenCh2 = c(23000,50000,57000,"NULL")
newtestdata$TotalIntenCh2
predict(model, newdata = newtestdata)
library("rattle")
fancyRpartPlot()
fancyRpartPlot(model)
fancyRpartPlot(model$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(model$finalModel)
rm(list = ls())
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelfitglm <- train(y ~ . , data=vowel.train, method=”glm”, verbose=FALSE)
modelfitrf <- train(y ~ . , data=vowel.train, method=”rf”)
modelfitglm <- train(y ~ ., data=vowel.train, method="glm", verbose=FALSE)
modelfitglm <- train(y ~ ., data=vowel.train, method="gbm", verbose=FALSE)
modelfitrf <- train(y ~ . , data=vowel.train, method="rf")
predictedglm <- predict(modelfitglm, vowel.test)
predictedrf <- predict(modelfitrf, vowel.test)
str(vowel.train$y)
confusionMatrix(predictedglm, vowel.test$y)
str(confusionMatrix(predictedglm, vowel.test$y))
confusionMatrix(predictedglm, vowel.test$y)
confusionMatrix(predictedrf, vowel.test$y)
agreegmentprediction <- predictedglm[predictedglm$y ==  predictedrf$y,]
agreegmentprediction <- predictedglm[predictedglm ==  predictedrf]
agreegmentprediction
predictedglm & predictedrf
predictedglm== predictedrf
which(predictedglm==predictedrf)
which(predictedglm==predictedrf==vowel.test$y)
predictedrf[which(predictedglm==predictedrf)]
(predictedglm==vowel.test$y)
(predictedglm==vowel.test$y)
which((predictedglm==predictedrf)&(predictedglm==vowel.test$y))
predictedrf[which((predictedglm==predictedrf)&(predictedglm==vowel.test$y))]
agreegmentprediction <- rep(0,1:dim(vowel.test$y))
dim(vowel.test$y)
lenght(vowel.test$y)
length(vowel.test$y)
agreegmentprediction <- rep(0,1:lenght(vowel.test$y))
agreegmentprediction <- rep(0,1:length(vowel.test$y))
1:length(vowel.test$y)
?rep
agreegmentprediction <- rep(x= 0,times = length(vowel.test$y))
agreegmentprediction
y <- which((predictedglm==predictedrf)&(predictedglm==vowel.test$y))
y
agreegmentprediction[y] <- predictedrf[y]
agreegmentprediction
as.vector()
as.vector(0,length(vowel.test$y))
confusionMatrix(as.factor(agreegmentprediction)),vowel.test$y)
confusionMatrix(as.factor(agreegmentprediction),vowel.test$y)
as.factor(agreegmentprediction)
vowel.test$y
as.factor(agreegmentprediction)
sum((predictedglm==predictedrf)&(predictedglm==vowel.test$y))
AccuracyAgreement <- sum((predictedglm==predictedrf)&(predictedglm==vowel.test$y))/length(vowel.test$y)
AccuracyAgreement
AccuracyAgreement <- sum( (predictedglm==predictedrf)&
(predictedglm==vowel.test$y))/sum(predictedglm==predictedrf)
AccuracyAgreement <- sum( (predictedglm==predictedrf)&
(predictedglm==vowel.test$y))/sum(predictedglm==predictedrf)
AccuracyAgreement
rm(list = ls())
library(caret)
library(gbm)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
str(predictors)
diagnosisrf <- train(diagnosis ~., data=training,method="rf")
diagnosisgbm <- train(diagnosis ~., data=training,method="gbm")
diagnosisgbm <- train(diagnosis ~., data=training,method="gbm", verbose=FALSE)
diagnosislda <- train(diagnosis ~., data=training,method="lda")
modellda<- diagnosislda
modelgbm <- diagnosisgbm
modelrf <- diagnosisrf
head(vowel.test[,-"y"])
head(vowel.test[,-c("y")])
head(vowel.test[,-c(y)])
predictrf <- predict(modelrf, testing)
predictrf <- predict(modelrf, testing)
predictgbm <- predict(modelgbm, testing)
predictlda <- predict(modellda, testing)
predictedvalues <- as.data.frame(predictrf,predictgbm,predictlda)
predictlda
predictgbm
predictrf
predictgbm
table(predictrf,testing$diagnosis)
table(predictrf,predictgbm,testing$diagnosis)
?accuracy
?accuracy()
predictedvalues <- as.data.frame(predictrf,predictgbm,predictlda)
str(predictrf)
str(predictgbm)
str(predictlda)
predictedvalues
predictedvalues <- data.frame(predictrf,predictgbm,predictlda)
predictedvalues <- data.frame(predictrf,predictgbm,predictlda,testing$diagnosis)
stackedmodel <- train(diagnosis~., data=predictedvalues, method="rf")
str(predictedvalues)
stackedmodel <- train(testing.diagnosis~., data=predictedvalues, method="rf")
stackprediction <- predict(stackedmodel,predictedvalues)
stackprediction
accrf <- sum(predictrf==testing$diagnosis)
accrf
accrf <- sum(predictrf==testing$diagnosis)/length(testing$diagnosis)
accrf
accrf <- sum(predictrf==testing$diagnosis)/length(testing$diagnosis)
accgbm <- sum(predictgbm==testing$diagnosis)/length(testing$diagnosis)
acclda <- sum(predictlda==testing$diagnosis)/length(testing$diagnosis)
accstack <- sum(stackprediction==testing$diagnosis)/length(testing$diagnosis)
accrf
accgbm
acclda
accstack
confusionMatrix(predictrf,testing$diagnosis)
confusionMatrix(predictrf,testing$diagnosis)$overall[1]
rm(list=ls(name = ))
library(caret)
library(gbm)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
set.seed(3433)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modelrf <- train(diagnosis ~., data=training,method="rf")
modelgbm <- train(diagnosis ~., data=training,method="gbm", verbose=FALSE)
modellda <- train(diagnosis ~., data=training,method="lda")
predictrf <- predict(modelrf, testing)
predictgbm <- predict(modelgbm, testing)
predictlda <- predict(modellda, testing)
predictedvalues <- data.frame(predictrf,predictgbm,predictlda,testing$diagnosis)
stackedmodel <- train(testing.diagnosis~., data=predictedvalues, method="rf")
stackprediction <- predict(stackedmodel,predictedvalues)
confusionMatrix(predictrf,testing$diagnosis)$overall[1]
accrf <- sum(predictrf==testing$diagnosis)/length(testing$diagnosis)
accgbm <- sum(predictgbm==testing$diagnosis)/length(testing$diagnosis)
acclda <- sum(predictlda==testing$diagnosis)/length(testing$diagnosis)
accstack <- sum(stackprediction==testing$diagnosis)/length(testing$diagnosis)
accrf
accgbm
acclda
accstack
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
rm(list=ls())
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
?plot.enet
??plot.enet
library(elasticnet)
install.packages(elasticnet)
install.packages("elasticnet")
?plot.enet
?plot.enet()
plot.enet()
library(elasticnet)
plot.enet()
?plot.enet()
set.seed(3523)
library(elasticnet)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
str(concrete)
set.seed(233)
mod_lasso <- train(CompressiveStrength ~ ., data = training, method = "lasso")
library(elasticnet)
plot.enet(mod_lasso$finalModel, xvar = "penalty", use.color = TRUE)
setwd("f:/Data Science/Curso/Machinne learning/trabajo final")
library(caret)
library(randomForest)
finaltestdata <- read.csv("testdata.csv")
inputdata <- read.csv("trainingdata.csv")
fortraindataindex <- createDataPartition(y=inputdata$classe, p=0.70, list=FALSE)
traindata <- inputdata[fortraindataindex,]
testdata <- inputdata[-fortraindataindex,]
rm(inputdata)
preprocesobj <- preProcess(traindata[,-160], method="knnImpute")
temptraindata <- predict(preprocesobj,traindata[,-160])
zerovar <- nearZeroVar(temptraindata,saveMetrics = FALSE)
temptraindata <- temptraindata[,-zerovar]
temptraindata$classe <- traindata$classe
head(temptraindata$classe)
head(traindata$classe)
modelfit <- randomForest(classe~.,data=temptraindata, ntree=200)
temptestdata <- predict(preprocesobj,testdata[,-160])
temptestdata <- temptestdata[,-zerovar]
temptestdata$classe <- testdata$classe
predictedoutput <- predict(modelfit,newdata=temptestdata)
cm <- confusionMatrix(predictedoutput,testdata$classe)
print(cm$table)
print(cm$overall[1])
finaltestdata <- predict(preprocesobj,finaltestdata[.-160])
finaltestdata <- finaltestdata[,-zerovar]
## defino igual level al factor
levels(finaltestdata[,5]) <- levels(traindata[,5])
finaltestdata <- read.csv("testdata.csv")
finaltestdata <- predict(preprocesobj,finaltestdata[,-160])
finaltestdata <- finaltestdata[,-zerovar]
output <- predict(modelfit,newdata=finaltestdata)
levels(finaltestdata[,5]) <- levels(traindata[,5])
output <- predict(modelfit,newdata=finaltestdata)
output
modelfit <- randomForest(classe~.,data=temptraindata, ntree=200, importance=TRUE)
finaltestdata <- read.csv("testdata.csv")
finaltestdata <- predict(preprocesobj,finaltestdata[,-160])
finaltestdata <- finaltestdata[,-zerovar]
## defino igual level al factor
levels(finaltestdata[,5]) <- levels(traindata[,5])
output <- predict(modelfit,newdata=finaltestdata)
output
?randomForest
modelfit <- randomForest(classe~.,data=temptraindata, ntree=400, importance=TRUE)
finaltestdata <- read.csv("testdata.csv")
finaltestdata <- predict(preprocesobj,finaltestdata[,-160])
finaltestdata <- finaltestdata[,-zerovar]
levels(finaltestdata[,5]) <- levels(traindata[,5])
output
output <- predict(modelfit,newdata=finaltestdata)
output
rm(list=ls())
finaltestdata <- read.csv("testdata.csv")
inputdata <- read.csv("trainingdata.csv")
fortraindataindex <- createDataPartition(y=inputdata$classe, p=0.70, list=FALSE)
traindata <- inputdata[fortraindataindex,]
testdata <- inputdata[-fortraindataindex,]
rm(inputdata)
temptraindata <-traindata[,-160]
zerovar <- nearZeroVar(temptraindata,saveMetrics = FALSE)
temptraindata <- temptraindata[,-zerovar]
temptraindata$classe <- traindata$classe
modelfit <- randomForest(classe~.,data=temptraindata, ntree=400, importance=TRUE)
temptraindata$classe <- traindata$classe
modelfit <- randomForest(classe~.,data=temptraindata, ntree=400, importance=TRUE)
